// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Java.x

package org.srcgll.lexer;

import java.io.IOException;
import java.io.Reader;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\25\4\26\2\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\37\1\41"+
    "\1\42\1\41\5\7\1\43\3\7\1\44\7\7\1\45"+
    "\2\7\1\46\1\47\1\50\1\51\1\52\1\3\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\7\1\64\1\65\1\66\1\67\1\70\1\71\1\7"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\41\0\2\3\4\7"+
    "\4\3\1\7\2\3\1\0\7\3\1\7\4\3\1\7"+
    "\5\3\27\7\1\3\37\7\1\3\u01ca\7\4\3\14\7"+
    "\16\3\5\7\7\3\1\7\1\3\1\7\21\3\160\0"+
    "\5\7\1\3\2\7\2\3\4\7\1\3\1\7\6\3"+
    "\1\7\1\3\3\7\1\3\1\7\1\3\24\7\1\3"+
    "\123\7\1\3\213\7\1\3\5\0\2\3\246\7\1\3"+
    "\46\7\2\3\1\7\6\3\51\7\6\3\1\7\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\7\4\3\4\7\15\3\6\0\5\3"+
    "\1\7\4\3\13\0\1\3\1\0\3\3\53\7\37\0"+
    "\4\3\2\7\1\0\143\7\1\3\1\7\10\0\1\3"+
    "\6\0\2\7\2\0\1\3\4\0\2\7\12\0\3\7"+
    "\2\3\1\7\17\3\1\0\1\7\1\0\36\7\33\0"+
    "\2\3\131\7\13\0\1\7\16\3\12\0\41\7\11\0"+
    "\2\7\4\3\1\7\2\3\1\0\30\7\4\0\1\7"+
    "\11\0\1\7\3\0\1\7\5\0\22\3\31\7\3\0"+
    "\4\3\13\7\5\3\30\7\1\3\6\7\1\3\2\0"+
    "\6\3\10\0\52\7\72\0\66\7\3\0\1\7\22\0"+
    "\1\7\7\0\12\7\2\0\2\3\12\0\1\3\20\7"+
    "\3\0\1\3\10\7\2\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\1\7\3\3\4\7\2\3\1\0\1\7"+
    "\7\0\2\3\2\0\2\3\3\0\1\7\10\3\1\0"+
    "\4\3\2\7\1\3\3\7\2\0\2\3\12\0\4\7"+
    "\7\3\2\7\1\3\1\0\2\3\3\0\1\3\6\7"+
    "\4\3\2\7\2\3\26\7\1\3\7\7\1\3\2\7"+
    "\1\3\2\7\1\3\2\7\2\3\1\0\1\3\5\0"+
    "\4\3\2\0\2\3\3\0\3\3\1\0\7\3\4\7"+
    "\1\3\1\7\7\3\14\0\3\7\1\0\13\3\3\0"+
    "\1\3\11\7\1\3\3\7\1\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\5\7\2\3\1\0\1\7\10\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\7\17\3\2\7"+
    "\2\0\2\3\12\0\1\3\1\7\7\3\1\7\6\0"+
    "\1\3\3\0\1\3\10\7\2\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\2\3\2\0\2\3\3\0\7\3\3\0"+
    "\4\3\2\7\1\3\3\7\2\0\2\3\12\0\1\3"+
    "\1\7\20\3\1\0\1\7\1\3\6\7\3\3\3\7"+
    "\1\3\4\7\3\3\2\7\1\3\1\7\1\3\2\7"+
    "\3\3\2\7\3\3\3\7\3\3\14\7\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\7\6\3\1\0"+
    "\16\3\12\0\11\3\1\7\6\3\5\0\10\7\1\3"+
    "\3\7\1\3\27\7\1\3\20\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\1\3"+
    "\3\7\2\3\1\7\2\3\2\7\2\0\2\3\12\0"+
    "\20\3\1\7\3\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\6\3"+
    "\2\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\1\0\14\3\4\0\11\7\1\3\3\7\1\3\51\7"+
    "\2\0\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\5\3\3\7\1\0\7\3\3\7\2\0\2\3\12\0"+
    "\12\3\6\7\1\3\3\0\1\3\22\7\3\3\30\7"+
    "\1\3\11\7\1\3\1\7\2\3\7\7\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\0"+
    "\2\3\2\0\15\3\60\7\1\0\2\7\7\0\4\3"+
    "\10\7\10\0\1\3\12\0\47\3\2\7\1\3\1\7"+
    "\1\3\5\7\1\3\30\7\1\3\1\7\1\3\12\7"+
    "\1\0\2\7\11\0\1\7\2\3\5\7\1\3\1\7"+
    "\1\3\7\0\1\3\12\0\2\3\4\7\40\3\1\7"+
    "\27\3\2\0\6\3\12\0\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\7\1\3\44\7\4\3"+
    "\24\0\1\3\2\0\5\7\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\7\24\0\1\7\12\0\6\3\6\7"+
    "\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7"+
    "\4\0\15\7\14\0\1\7\17\0\2\3\46\7\1\3"+
    "\1\7\5\3\1\7\2\3\53\7\1\3\115\7\1\3"+
    "\4\7\2\3\7\7\1\3\1\7\1\3\4\7\2\3"+
    "\51\7\1\3\4\7\2\3\41\7\1\3\4\7\2\3"+
    "\7\7\1\3\1\7\1\3\4\7\2\3\17\7\1\3"+
    "\71\7\1\3\4\7\2\3\103\7\2\3\3\0\40\3"+
    "\20\7\20\3\126\7\2\3\6\7\3\3\u016c\7\2\3"+
    "\21\7\1\3\32\7\5\3\113\7\3\3\13\7\7\3"+
    "\22\7\4\0\11\3\23\7\3\0\13\3\22\7\2\0"+
    "\14\3\15\7\1\3\3\7\1\3\2\0\14\3\64\7"+
    "\40\0\3\3\1\7\3\3\2\7\1\0\2\3\12\0"+
    "\41\3\17\0\6\3\131\7\7\3\5\7\2\0\42\7"+
    "\1\0\1\7\5\3\106\7\12\3\37\7\1\3\14\0"+
    "\4\3\14\0\12\3\12\0\36\7\2\3\5\7\13\3"+
    "\54\7\4\3\32\7\6\3\12\0\46\3\27\7\5\0"+
    "\4\3\65\7\12\0\1\3\35\0\2\3\13\0\6\3"+
    "\12\0\15\3\1\7\10\3\16\0\1\3\20\0\61\3"+
    "\5\0\57\7\21\0\10\7\3\3\12\0\21\3\11\0"+
    "\14\3\3\0\36\7\15\0\2\7\12\0\54\7\16\0"+
    "\14\3\44\7\24\0\10\3\12\0\3\3\3\7\12\0"+
    "\44\7\2\3\11\7\7\3\53\7\2\3\3\7\20\3"+
    "\3\0\1\3\25\0\4\7\1\0\6\7\1\0\2\7"+
    "\3\0\1\7\5\3\300\7\100\0\26\7\2\3\6\7"+
    "\2\3\46\7\2\3\6\7\2\3\10\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\37\7\2\3\65\7"+
    "\1\3\7\7\1\3\1\7\3\3\3\7\1\3\7\7"+
    "\3\3\4\7\2\3\6\7\4\3\15\7\5\3\3\7"+
    "\1\3\7\7\16\3\5\0\32\3\5\0\20\3\2\7"+
    "\23\3\1\7\13\3\5\0\1\3\12\0\1\3\1\7"+
    "\15\3\1\7\20\3\15\7\3\3\41\7\17\3\15\0"+
    "\4\3\1\0\3\3\14\0\21\3\1\7\4\3\1\7"+
    "\2\3\12\7\1\3\1\7\3\3\5\7\6\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\4\7\1\3\13\7"+
    "\2\3\4\7\5\3\5\7\4\3\1\7\21\3\51\7"+
    "\u0177\3\345\7\6\3\4\7\3\0\2\7\14\3\46\7"+
    "\1\3\1\7\5\3\1\7\2\3\70\7\7\3\1\7"+
    "\17\3\1\0\27\7\11\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\40\0\57\3\1\7\325\3"+
    "\3\7\31\3\11\7\6\0\1\3\5\7\2\3\5\7"+
    "\4\3\126\7\2\3\2\0\2\3\3\7\1\3\132\7"+
    "\1\3\4\7\5\3\53\7\1\3\136\7\21\3\40\7"+
    "\60\3\320\7\100\3\215\7\103\3\56\7\2\3\15\7"+
    "\3\3\20\7\12\0\2\7\24\3\57\7\1\0\4\3"+
    "\12\0\1\3\37\7\2\0\120\7\2\0\45\3\11\7"+
    "\2\3\147\7\2\3\100\7\5\3\2\7\1\3\1\7"+
    "\1\3\5\7\30\3\20\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\4\3\1\0\13\3\1\7\7\3"+
    "\64\7\14\3\2\0\62\7\22\0\12\3\12\0\6\3"+
    "\22\0\6\7\3\3\1\7\1\3\2\7\13\0\34\7"+
    "\10\0\2\3\27\7\15\0\14\3\35\7\3\3\4\0"+
    "\57\7\16\0\16\3\1\7\12\0\6\3\5\7\1\0"+
    "\12\7\12\0\5\7\1\3\51\7\16\0\11\3\3\7"+
    "\1\0\10\7\2\0\2\3\12\0\6\3\27\7\3\3"+
    "\1\7\3\0\62\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\3\3\7\2\3"+
    "\13\7\5\0\2\3\3\7\2\0\12\3\6\7\2\3"+
    "\6\7\2\3\6\7\11\3\7\7\1\3\7\7\1\3"+
    "\53\7\1\3\16\7\6\3\163\7\10\0\1\3\2\0"+
    "\2\3\12\0\6\3\244\7\14\3\27\7\4\3\61\7"+
    "\4\3\156\7\2\3\152\7\46\3\7\7\14\3\5\7"+
    "\5\3\1\7\1\0\12\7\1\3\15\7\1\3\5\7"+
    "\1\3\1\7\1\3\2\7\1\3\2\7\1\3\154\7"+
    "\41\3\153\7\22\3\100\7\2\3\66\7\50\3\15\7"+
    "\3\3\20\0\20\3\20\0\3\3\2\7\30\3\3\7"+
    "\31\3\1\7\6\3\5\7\1\3\207\7\2\3\1\0"+
    "\4\3\1\7\13\3\12\0\7\3\32\7\4\3\1\7"+
    "\1\3\32\7\13\3\131\7\3\3\6\7\2\3\6\7"+
    "\2\3\6\7\2\3\3\7\3\3\2\7\3\3\2\7"+
    "\22\3\3\0\4\3\14\7\1\3\32\7\1\3\23\7"+
    "\1\3\2\7\1\3\17\7\2\3\16\7\42\3\173\7"+
    "\105\3\65\7\210\3\1\0\202\3\35\7\3\3\61\7"+
    "\17\3\1\0\37\3\40\7\15\3\36\7\5\3\46\7"+
    "\5\0\5\3\36\7\2\3\44\7\4\3\10\7\1\3"+
    "\5\7\52\3\236\7\2\3\12\0\6\3\44\7\4\3"+
    "\44\7\4\3\50\7\10\3\64\7\14\3\13\7\1\3"+
    "\17\7\1\3\7\7\1\3\2\7\1\3\13\7\1\3"+
    "\17\7\1\3\7\7\1\3\2\7\103\3\67\7\11\3"+
    "\26\7\12\3\10\7\30\3\6\7\1\3\52\7\1\3"+
    "\11\7\105\3\6\7\2\3\1\7\1\3\54\7\1\3"+
    "\2\7\3\3\1\7\2\3\27\7\12\3\27\7\11\3"+
    "\37\7\101\3\23\7\1\3\2\7\12\3\26\7\12\3"+
    "\32\7\106\3\70\7\6\3\2\7\100\3\1\7\3\0"+
    "\1\3\2\0\5\3\4\0\4\7\1\3\3\7\1\3"+
    "\35\7\2\3\3\0\4\3\1\0\40\3\35\7\3\3"+
    "\35\7\43\3\10\7\1\3\34\7\2\0\31\3\66\7"+
    "\12\3\26\7\12\3\23\7\15\3\22\7\156\3\111\7"+
    "\67\3\63\7\15\3\63\7\15\3\44\7\4\0\10\3"+
    "\12\0\u0146\3\52\7\1\3\2\0\3\3\2\7\113\3"+
    "\3\0\35\7\12\3\1\7\10\3\26\7\13\0\37\3"+
    "\22\7\4\0\52\3\25\7\33\3\27\7\11\3\3\0"+
    "\65\7\17\0\37\3\13\0\2\7\2\0\1\7\11\3"+
    "\4\0\55\7\13\0\2\3\1\0\4\3\1\0\12\3"+
    "\1\0\2\3\31\7\7\3\12\0\6\3\3\0\44\7"+
    "\16\0\1\3\12\0\4\3\1\7\2\0\1\7\10\3"+
    "\43\7\1\0\2\3\1\7\11\3\3\0\60\7\16\0"+
    "\4\7\4\3\4\0\1\3\14\0\1\7\1\3\1\7"+
    "\43\3\22\7\1\3\31\7\14\0\6\3\1\0\2\7"+
    "\1\0\76\3\7\7\1\3\1\7\1\3\4\7\1\3"+
    "\17\7\1\3\12\7\7\3\57\7\14\0\5\3\12\0"+
    "\6\3\4\0\1\3\10\7\2\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\1\3\2\0"+
    "\1\7\7\0\2\3\2\0\2\3\3\0\2\3\1\7"+
    "\6\3\1\0\5\3\5\7\2\0\2\3\7\0\3\3"+
    "\5\0\213\3\65\7\22\0\4\7\5\3\12\0\4\3"+
    "\1\0\3\7\36\3\60\7\24\0\2\7\1\3\1\7"+
    "\10\3\12\0\246\3\57\7\7\0\2\3\11\0\27\3"+
    "\4\7\2\0\42\3\60\7\21\0\3\3\1\7\13\3"+
    "\12\0\46\3\53\7\15\0\1\7\7\3\12\0\66\3"+
    "\33\7\2\3\17\0\4\3\12\0\6\3\7\7\271\3"+
    "\54\7\17\0\145\3\100\7\12\0\25\3\10\7\2\3"+
    "\1\7\2\3\10\7\1\3\2\7\1\3\30\7\6\0"+
    "\1\3\2\0\2\3\4\0\1\7\1\0\1\7\2\0"+
    "\14\3\12\0\106\3\10\7\2\3\47\7\7\0\2\3"+
    "\7\0\1\7\1\3\1\7\1\0\33\3\1\7\12\0"+
    "\50\7\7\0\1\7\4\0\10\3\1\0\10\3\1\7"+
    "\13\0\56\7\20\0\3\3\1\7\22\3\111\7\7\3"+
    "\11\7\1\3\45\7\10\0\1\3\10\0\1\7\17\3"+
    "\12\0\30\3\36\7\2\3\26\0\1\3\16\0\111\3"+
    "\7\7\1\3\2\7\1\3\46\7\6\0\3\3\1\0"+
    "\1\3\2\0\1\3\7\0\1\7\1\0\10\3\12\0"+
    "\6\3\6\7\1\3\2\7\1\3\40\7\5\0\1\3"+
    "\2\0\1\3\5\0\1\7\7\3\12\0\u0136\3\23\7"+
    "\4\0\11\3\2\0\1\7\1\0\15\7\1\3\42\7"+
    "\7\0\3\3\5\0\15\3\12\0\126\3\1\7\54\3"+
    "\4\7\37\3\232\7\146\3\157\7\21\3\304\7\u014c\3"+
    "\141\7\17\3\60\7\21\0\6\7\17\0\252\3\107\7"+
    "\271\3\71\7\7\3\37\7\1\3\12\0\6\3\117\7"+
    "\1\3\12\0\6\3\36\7\2\3\5\0\13\3\60\7"+
    "\7\0\11\3\4\7\14\3\12\0\11\3\25\7\5\3"+
    "\23\7\260\3\100\7\200\3\113\7\4\3\1\0\1\7"+
    "\67\0\7\3\4\0\15\7\100\3\2\7\1\3\1\7"+
    "\1\0\13\3\2\0\16\3\370\7\10\3\326\7\52\3"+
    "\11\7\u01e7\3\4\7\1\3\7\7\1\3\2\7\1\3"+
    "\43\7\17\3\1\7\35\3\3\7\2\3\1\7\16\3"+
    "\4\7\10\3\u018c\7\4\3\153\7\5\3\15\7\3\3"+
    "\11\7\7\3\12\7\3\3\2\0\1\3\4\0\134\3"+
    "\56\0\2\3\27\0\u011e\3\5\0\3\3\26\0\2\3"+
    "\7\0\36\3\4\0\224\3\3\0\273\3\125\7\1\3"+
    "\107\7\1\3\2\7\2\3\1\7\2\3\2\7\2\3"+
    "\4\7\1\3\14\7\1\3\1\7\1\3\7\7\1\3"+
    "\101\7\1\3\4\7\2\3\10\7\1\3\7\7\1\3"+
    "\34\7\1\3\4\7\1\3\5\7\1\3\1\7\3\3"+
    "\7\7\1\3\u0154\7\2\3\31\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\10\7\2\3\151\0\4\3\62\0\10\3\1\0\16\3"+
    "\1\0\26\3\5\0\1\3\17\0\120\3\37\7\6\3"+
    "\6\7\325\3\7\0\1\3\21\0\2\3\7\0\1\3"+
    "\2\0\1\3\5\0\5\3\76\7\41\3\1\0\160\3"+
    "\55\7\3\3\7\0\7\7\2\3\12\0\4\3\1\7"+
    "\u0141\3\36\7\1\0\21\3\54\7\16\0\5\3\1\7"+
    "\320\3\34\7\16\0\346\3\7\7\1\3\4\7\1\3"+
    "\2\7\1\3\17\7\1\3\305\7\13\3\7\0\51\3"+
    "\104\7\7\0\1\7\4\3\12\0\u0156\3\1\7\117\3"+
    "\4\7\1\3\33\7\1\3\2\7\1\3\1\7\2\3"+
    "\1\7\1\3\12\7\1\3\4\7\1\3\1\7\1\3"+
    "\1\7\6\3\1\7\4\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\3\7\1\3\2\7\1\3\1\7\2\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\2\7\1\3\1\7\2\3\4\7\1\3"+
    "\7\7\1\3\4\7\1\3\4\7\1\3\1\7\1\3"+
    "\12\7\1\3\21\7\5\3\3\7\1\3\5\7\1\3"+
    "\21\7\u0134\3\12\0\6\3\340\7\40\3\72\7\6\3"+
    "\336\7\2\3\u0182\7\16\3\u0131\7\37\3\36\7\342\3"+
    "\113\7\5\3\u0160\7\121\3\1\0\36\3\140\0\200\3"+
    "\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\0\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\17\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\40\1\41\2\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\0"+
    "\1\1\1\51\1\50\1\16\1\0\1\50\1\0\1\16"+
    "\2\0\1\16\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\12\3\1\62\7\3\1\63\23\3"+
    "\1\64\1\65\1\0\1\66\2\0\1\67\3\0\1\16"+
    "\3\0\1\16\1\70\1\71\1\72\22\3\1\73\2\3"+
    "\1\74\2\3\1\75\20\3\1\76\3\3\2\0\1\50"+
    "\1\0\1\1\5\0\1\77\4\3\1\100\1\101\1\3"+
    "\1\102\4\3\1\103\1\104\7\3\1\105\1\3\1\106"+
    "\13\3\1\107\2\3\1\110\1\111\2\3\3\0\3\3"+
    "\1\112\1\113\1\114\4\3\1\115\1\116\12\3\1\117"+
    "\2\3\1\120\2\3\1\121\2\3\1\122\1\0\1\3"+
    "\1\123\3\3\1\124\3\3\1\125\2\3\1\126\3\3"+
    "\1\127\1\130\1\131\1\3\1\132\1\3\1\133\3\3"+
    "\1\134\1\3\1\135\1\136\1\137\3\3\1\140\1\141"+
    "\5\3\1\142\1\143\4\3\1\144\2\3\1\145\2\3"+
    "\1\146\1\147\1\3\1\150\1\151\1\152\2\3\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\107\0\107\0\u027f\0\u02c6\0\107\0\u030d\0\u0354"+
    "\0\u039b\0\u03e2\0\u0429\0\u0470\0\107\0\u04b7\0\u04fe\0\u0545"+
    "\0\107\0\107\0\107\0\107\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\107\0\u09fc\0\107\0\107"+
    "\0\107\0\107\0\u0a43\0\107\0\107\0\107\0\u0a8a\0\u0ad1"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\u0b18\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\107\0\u0c34\0\u0c7b\0\u0cc2\0\107\0\u0d09"+
    "\0\107\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\107\0\u0e6c\0\107"+
    "\0\107\0\107\0\107\0\u0eb3\0\107\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u0163"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821"+
    "\0\u1868\0\u18af\0\u18f6\0\107\0\107\0\u193d\0\107\0\u1984"+
    "\0\u19cb\0\107\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\107\0\107\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u0163"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u0163\0\u22f2\0\u2339"+
    "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u0163\0\u2762"+
    "\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u1a59\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\107\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u0163\0\u0163\0\u2bd2\0\u0163\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u0163\0\u0163\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u0163\0\u2f26\0\u0163\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233"+
    "\0\u0163\0\u327a\0\u32c1\0\u0163\0\u0163\0\u3308\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u0163\0\u0163\0\u0163"+
    "\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u0163\0\u36a3\0\u36ea"+
    "\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922"+
    "\0\u0163\0\u3969\0\u39b0\0\u0163\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u0163\0\u3b5a\0\u3ba1\0\u0163\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u0163\0\u3cbd\0\u3d04\0\u3d4b\0\u0163\0\u3d92\0\u3dd9\0\u0163"+
    "\0\u3e20\0\u3e67\0\u3eae\0\u0163\0\u0163\0\u0163\0\u3ef5\0\u0163"+
    "\0\u3f3c\0\u0163\0\u3f83\0\u3fca\0\u4011\0\u0163\0\u4058\0\u0163"+
    "\0\u0163\0\u0163\0\u409f\0\u40e6\0\u412d\0\u0163\0\u0163\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u0163\0\u0163\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u0163\0\u43f3\0\u443a\0\u0163\0\u4481\0\u44c8"+
    "\0\u0163\0\u0163\0\u450f\0\u0163\0\u0163\0\u0163\0\u4556\0\u459d"+
    "\0\u0163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\4\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\7\6\1\33\1\0\1\34\1\35"+
    "\1\6\1\36\1\37\1\40\1\41\1\42\1\43\2\6"+
    "\1\44\1\6\1\45\1\6\1\46\1\6\1\47\1\50"+
    "\1\51\1\52\1\6\1\53\1\54\3\6\1\55\1\56"+
    "\1\57\1\60\111\0\1\2\137\0\1\61\53\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\62\40\5\1\63\37\5"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\31\6\37\0\1\64\64\0\1\65\21\0\1\66\53\0"+
    "\2\67\1\0\1\67\1\0\5\67\1\0\34\67\1\70"+
    "\37\67\33\0\1\71\71\0\1\72\14\0\1\73\73\0"+
    "\1\74\12\0\1\75\1\76\73\0\1\77\1\0\5\100"+
    "\74\0\1\101\4\0\1\102\10\0\1\103\74\0\1\104"+
    "\1\0\4\105\11\0\1\106\1\107\1\110\1\111\1\0"+
    "\1\112\4\0\1\113\1\0\1\106\1\0\1\107\1\110"+
    "\1\107\4\0\1\111\12\0\1\112\27\0\1\104\1\0"+
    "\5\114\11\0\1\107\1\110\1\111\6\0\1\115\3\0"+
    "\1\107\1\110\1\107\4\0\1\111\51\0\1\116\110\0"+
    "\1\117\1\120\1\121\105\0\1\122\106\0\1\123\1\124"+
    "\105\0\1\125\53\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\2\6\1\126\16\6\1\127\7\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\16\6\1\130\1\6\1\131\6\6\1\132\1\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\133\6\6\1\134\2\6\1\135\2\6"+
    "\1\136\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\137\10\6\1\140\12\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\13\6\1\141\1\6\1\142\10\6\1\143\2\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\144\7\6\1\145\1\6\1\146\2\6"+
    "\1\147\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\6\6\1\150\5\6\1\151\1\152"+
    "\13\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\16\6\1\153\12\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\1\6\1\154"+
    "\3\6\1\155\15\6\1\156\5\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\1\6\1\157"+
    "\16\6\1\160\2\6\1\161\5\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\162"+
    "\23\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\10\6\1\163\11\6\1\164\1\165\1\6"+
    "\1\166\1\6\1\167\1\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\10\6\1\170\7\6"+
    "\1\171\10\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\16\6\1\172\12\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\10\6"+
    "\1\173\20\6\37\0\1\174\50\0\1\175\10\0\1\5"+
    "\3\0\1\5\10\0\4\5\20\0\1\5\4\0\1\5"+
    "\3\0\1\5\6\0\1\5\2\0\1\5\1\0\1\5"+
    "\1\176\23\0\1\177\102\0\1\67\3\0\1\67\10\0"+
    "\3\200\1\201\20\0\1\67\4\0\1\67\3\0\1\67"+
    "\6\0\1\67\2\0\1\67\1\0\1\67\33\0\1\202"+
    "\126\0\1\107\1\203\13\0\1\107\1\203\1\107\26\0"+
    "\15\204\1\205\71\204\2\102\1\2\1\102\1\3\102\102"+
    "\23\0\5\100\11\0\1\107\1\203\13\0\1\107\1\203"+
    "\1\107\51\0\4\105\14\0\1\111\6\0\1\113\12\0"+
    "\1\111\44\0\2\206\100\0\1\207\1\0\1\207\2\0"+
    "\5\210\100\0\1\211\1\0\5\212\7\0\4\212\10\0"+
    "\6\212\51\0\4\105\23\0\1\113\57\0\5\114\13\0"+
    "\1\111\6\0\1\115\12\0\1\111\44\0\5\114\22\0"+
    "\1\115\67\0\1\213\106\0\1\214\1\215\52\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\21\6"+
    "\1\216\7\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\217\7\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\16\6"+
    "\1\220\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\221\23\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\222\6\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\223\1\224\6\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\1\6\1\225\27\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\1\6\1\226\27\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\15\6\1\227\13\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\6\6\1\230\22\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\23\6\1\231\5\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\21\6\1\232\7\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\23\6\1\233\5\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\22\6\1\234\6\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\235\15\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\15\6\1\236\13\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\16\6\1\237\12\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\240\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\17\6\1\241\11\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\21\6\1\242\1\243\6\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\15\6\1\244\13\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\245\6\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\25\6\1\246\3\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\13\6\1\247\15\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\3\6\1\250\25\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\11\6\1\251\4\6"+
    "\1\252\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\2\6\1\253\26\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\254\6\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\16\6\1\255\12\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\256\16\6\1\257\10\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\17\6\1\260\11\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\11\6\1\261\17\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\15\6\1\262\13\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\11\6\1\263\6\6\1\264\10\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\265\21\6\1\266\3\6\1\267\1\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\11\6"+
    "\1\270\1\6\1\271\15\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\11\6\1\272\17\6"+
    "\27\0\5\273\7\0\4\273\10\0\6\273\14\0\1\176"+
    "\23\0\1\177\10\0\4\201\72\0\1\177\10\0\4\67"+
    "\76\0\1\274\1\0\1\274\2\0\5\275\57\0\15\204"+
    "\1\276\106\204\1\276\4\204\1\277\64\204\23\0\2\206"+
    "\16\0\1\111\6\0\1\300\12\0\1\111\44\0\5\210"+
    "\102\0\5\210\11\0\1\107\10\0\1\301\3\0\1\107"+
    "\1\0\1\107\51\0\5\302\7\0\4\302\10\0\6\302"+
    "\47\0\1\303\1\0\5\212\7\0\4\212\1\111\1\203"+
    "\5\0\1\304\6\212\4\0\1\111\3\0\1\203\50\0"+
    "\1\305\53\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\306\6\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\307"+
    "\23\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\13\6\1\310\15\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\1\6\1\311"+
    "\27\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\312\23\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\313"+
    "\23\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\3\6\1\314\25\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\20\6\1\315"+
    "\10\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\21\6\1\316\7\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\317"+
    "\6\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\320\27\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\2\6\1\321"+
    "\26\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\322\23\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\14\6\1\323"+
    "\14\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\324\23\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\21\6\1\266"+
    "\7\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\325\27\6\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\1\6\1\326"+
    "\27\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\13\6\1\327\2\6\1\330\12\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\22\6\1\331\6\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\5\6\1\332\23\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\7\6\1\333\21\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\11\6\1\334\17\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\335\15\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\12\6\1\336\16\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\24\6\1\337\4\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\22\6\1\340\6\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\341\15\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\23\6\1\342\5\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\20\6\1\343\10\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\22\6\1\344\6\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\11\6\1\345\17\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\5\6\1\346\23\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\22\6\1\347\6\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\3\6\1\350\25\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\21\6\1\351\7\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\16\6\1\352\12\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\15\6\1\353\13\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\5\6\1\354\23\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\4\6\1\355\24\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\1\6\1\356\27\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\357\15\6\27\0\5\360\7\0\4\360\10\0"+
    "\6\360\51\0\5\275\102\0\5\275\11\0\1\107\10\0"+
    "\1\361\3\0\1\107\1\0\1\107\26\0\15\204\1\276"+
    "\4\204\1\2\64\204\23\0\2\206\25\0\1\300\57\0"+
    "\5\210\22\0\1\301\57\0\5\302\7\0\4\302\1\0"+
    "\1\203\5\0\1\362\6\302\10\0\1\203\40\0\5\302"+
    "\7\0\4\302\1\0\1\203\6\0\6\302\10\0\1\203"+
    "\40\0\5\212\7\0\4\212\7\0\1\304\6\212\26\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\20\6\1\363\10\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\364\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\5\6\1\365\23\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\12\6\1\366\16\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\10\6\1\367\20\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\21\6\1\370\7\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\11\6\1\371\17\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\23\6\1\372\5\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\373\15\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\15\6\1\374\13\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\375\15\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\22\6\1\376\6\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\5\6\1\377\23\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\u0100\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\1\6\1\u0101\27\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\u0102\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\24\6\1\u0103\4\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\1\6\1\u0104\27\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\1\6\1\u0105\27\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\5\6\1\u0106\23\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\11\6\1\u0107\17\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\u0108\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\22\6\1\u0109\6\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\11\6\1\u010a\17\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\3\6\1\u010b\25\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\20\6\1\u010c\10\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\3\6\1\u010d\25\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\10\6\1\u010e\20\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\25\6\1\u010f\3\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\21\6\1\u0110\7\6\4\0"+
    "\1\6\6\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\22\6\1\u0111\6\6\4\0\1\6\6\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\5\6\1\u0112\23\6\27\0"+
    "\5\u0113\7\0\4\u0113\10\0\6\u0113\51\0\5\275\22\0"+
    "\1\361\57\0\5\302\7\0\4\302\7\0\1\362\6\302"+
    "\26\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\u0114\27\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\u0115\6\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\u0116\27\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\15\6\1\u0117\13\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\13\6\1\u0118\15\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\5\6\1\u0119\23\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\4\6\1\u011a\24\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\13\6\1\u011b\15\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\14\6\1\u011c\14\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\u011d\6\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\15\6\1\u011e\13\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\6\6\1\u011f\22\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\u0120\23\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\7\6\1\u0121\21\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\22\6\1\u0122\6\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\3\6\1\u0123\25\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\3\6\1\u0124\25\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\15\6\1\u0125\13\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\3\6\1\u0126\25\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\u0127\6\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\10\6\1\u0128\20\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\20\6\1\u0129\10\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\21\6\1\u012a\7\6\4\0\1\6\6\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\11\6\1\u012b\17\6"+
    "\4\0\1\6\6\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\11\6\1\u012c\17\6\27\0\5\5\7\0\4\5"+
    "\10\0\6\5\26\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\3\6\1\u012d\25\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\15\6"+
    "\1\u012e\13\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\23\6\1\u012f\5\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\u0130\6\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\u0131\7\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\27\6"+
    "\1\u0132\1\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u0133\23\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\3\6"+
    "\1\u0134\25\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\1\6\1\u0135\27\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\u0136\23\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u0137\23\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\u0138\6\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\6\6\1\u0139\22\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\16\6"+
    "\1\u013a\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u013b\23\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\13\6"+
    "\1\u013c\15\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\22\6\1\u013d\6\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\u013e\23\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\15\6\1\u013f\13\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\u0140\23\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\3\6\1\u0141\25\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\u0142\23\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\17\6\1\u0143\11\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\15\6"+
    "\1\u0144\13\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\15\6\1\u0145\13\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\u0146\23\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\22\6\1\u0147\6\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\16\6"+
    "\1\u0148\12\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u0149\23\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\4\6"+
    "\1\u014a\24\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\11\6\1\u014b\17\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\u014c\6\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\u014d\7\6\4\0\1\6"+
    "\6\0\1\6\13\0\5\6\7\0\7\6\4\0\6\6"+
    "\1\u014e\22\6\4\0\1\6\6\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\30\6\1\u014f\4\0\1\6\6\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u0150"+
    "\23\6\4\0\1\6\6\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\4\6\1\u0151\24\6\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\0\3\1\1\0\2\11\2\1"+
    "\1\11\6\1\1\11\3\1\4\11\20\1\1\11\1\1"+
    "\4\11\1\0\3\11\2\0\6\11\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\11\1\0\1\11\2\0"+
    "\1\1\1\0\1\11\1\1\4\11\1\1\1\11\46\1"+
    "\2\11\1\0\1\11\2\0\1\11\3\0\1\1\3\0"+
    "\1\1\2\11\56\1\2\0\1\1\1\0\1\1\5\0"+
    "\1\11\52\1\3\0\40\1\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws IOException if the reader could not be closed.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception IOException if any I/O-Error occurs.
   */
  public JavaToken yylex() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return JavaToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 108: break;
          case 2:
            { return JavaToken.EXCLAMATIONMARK;
            }
            // fall through
          case 109: break;
          case 3:
            { return JavaToken.ID;
            }
            // fall through
          case 110: break;
          case 4:
            { return JavaToken.PERCENT;
            }
            // fall through
          case 111: break;
          case 5:
            { return JavaToken.ANDBIT;
            }
            // fall through
          case 112: break;
          case 6:
            { return JavaToken.PARENTHLEFT;
            }
            // fall through
          case 113: break;
          case 7:
            { return JavaToken.PARENTHRIGHT;
            }
            // fall through
          case 114: break;
          case 8:
            { return JavaToken.STAR;
            }
            // fall through
          case 115: break;
          case 9:
            { return JavaToken.PLUS;
            }
            // fall through
          case 116: break;
          case 10:
            { return JavaToken.COMMA;
            }
            // fall through
          case 117: break;
          case 11:
            { return JavaToken.MINUS;
            }
            // fall through
          case 118: break;
          case 12:
            { return JavaToken.DOT;
            }
            // fall through
          case 119: break;
          case 13:
            { return JavaToken.SLASH;
            }
            // fall through
          case 120: break;
          case 14:
            { return JavaToken.INTEGERLIT;
            }
            // fall through
          case 121: break;
          case 15:
            { return JavaToken.COLON;
            }
            // fall through
          case 122: break;
          case 16:
            { return JavaToken.SEMICOLON;
            }
            // fall through
          case 123: break;
          case 17:
            { return JavaToken.DIAMONDLEFT;
            }
            // fall through
          case 124: break;
          case 18:
            { return JavaToken.ASSIGN;
            }
            // fall through
          case 125: break;
          case 19:
            { return JavaToken.DIAMONDRIGHT;
            }
            // fall through
          case 126: break;
          case 20:
            { return JavaToken.QUESTIONMARK;
            }
            // fall through
          case 127: break;
          case 21:
            { return JavaToken.AT;
            }
            // fall through
          case 128: break;
          case 22:
            { return JavaToken.BRACKETLEFT;
            }
            // fall through
          case 129: break;
          case 23:
            { return JavaToken.BRACKETRIGHT;
            }
            // fall through
          case 130: break;
          case 24:
            { return JavaToken.XORBIT;
            }
            // fall through
          case 131: break;
          case 25:
            { return JavaToken.CURLYLEFT;
            }
            // fall through
          case 132: break;
          case 26:
            { return JavaToken.ORBIT;
            }
            // fall through
          case 133: break;
          case 27:
            { return JavaToken.CURLYRIGHT;
            }
            // fall through
          case 134: break;
          case 28:
            { return JavaToken.TILDA;
            }
            // fall through
          case 135: break;
          case 29:
            { return JavaToken.NOTEQ;
            }
            // fall through
          case 136: break;
          case 30:
            { return JavaToken.STRINGLIT;
            }
            // fall through
          case 137: break;
          case 31:
            { return JavaToken.PERCENTASSIGN;
            }
            // fall through
          case 138: break;
          case 32:
            { return JavaToken.AND;
            }
            // fall through
          case 139: break;
          case 33:
            { return JavaToken.ANDASSIGN;
            }
            // fall through
          case 140: break;
          case 34:
            { return JavaToken.STARASSIGN;
            }
            // fall through
          case 141: break;
          case 35:
            { return JavaToken.PLUSPLUS;
            }
            // fall through
          case 142: break;
          case 36:
            { return JavaToken.PLUSASSIGN;
            }
            // fall through
          case 143: break;
          case 37:
            { return JavaToken.MINUSMINUS;
            }
            // fall through
          case 144: break;
          case 38:
            { return JavaToken.MINUSASSIGN;
            }
            // fall through
          case 145: break;
          case 39:
            { return JavaToken.ARROW;
            }
            // fall through
          case 146: break;
          case 40:
            { return JavaToken.FLOATINGLIT;
            }
            // fall through
          case 147: break;
          case 41:
            { return JavaToken.SLASHASSIGN;
            }
            // fall through
          case 148: break;
          case 42:
            { return JavaToken.DOUBLECOLON;
            }
            // fall through
          case 149: break;
          case 43:
            { return JavaToken.LEFTSHIFT;
            }
            // fall through
          case 150: break;
          case 44:
            { return JavaToken.LESSEQ;
            }
            // fall through
          case 151: break;
          case 45:
            { return JavaToken.DIAMOND;
            }
            // fall through
          case 152: break;
          case 46:
            { return JavaToken.EQ;
            }
            // fall through
          case 153: break;
          case 47:
            { return JavaToken.GREATEQ;
            }
            // fall through
          case 154: break;
          case 48:
            { return JavaToken.RIGHTSHIT;
            }
            // fall through
          case 155: break;
          case 49:
            { return JavaToken.XORASSIGN;
            }
            // fall through
          case 156: break;
          case 50:
            { return JavaToken.DO;
            }
            // fall through
          case 157: break;
          case 51:
            { return JavaToken.IF;
            }
            // fall through
          case 158: break;
          case 52:
            { return JavaToken.ORASSIGN;
            }
            // fall through
          case 159: break;
          case 53:
            { return JavaToken.OR;
            }
            // fall through
          case 160: break;
          case 54:
            { return JavaToken.CHARLIT;
            }
            // fall through
          case 161: break;
          case 55:
            { return JavaToken.ELLIPSIS;
            }
            // fall through
          case 162: break;
          case 56:
            { return JavaToken.SHIFTLEFTASSIGN;
            }
            // fall through
          case 163: break;
          case 57:
            { return JavaToken.SHIFTRIGHTASSIGN;
            }
            // fall through
          case 164: break;
          case 58:
            { return JavaToken.USRIGHTSHIFT;
            }
            // fall through
          case 165: break;
          case 59:
            { return JavaToken.FOR;
            }
            // fall through
          case 166: break;
          case 60:
            { return JavaToken.INT;
            }
            // fall through
          case 167: break;
          case 61:
            { return JavaToken.NEW;
            }
            // fall through
          case 168: break;
          case 62:
            { return JavaToken.TRY;
            }
            // fall through
          case 169: break;
          case 63:
            { return JavaToken.USRIGHTSHIFTASSIGN;
            }
            // fall through
          case 170: break;
          case 64:
            { return JavaToken.BYTE;
            }
            // fall through
          case 171: break;
          case 65:
            { return JavaToken.CASE;
            }
            // fall through
          case 172: break;
          case 66:
            { return JavaToken.CHAR;
            }
            // fall through
          case 173: break;
          case 67:
            { return JavaToken.ELSE;
            }
            // fall through
          case 174: break;
          case 68:
            { return JavaToken.ENUM;
            }
            // fall through
          case 175: break;
          case 69:
            { return JavaToken.LONG;
            }
            // fall through
          case 176: break;
          case 70:
            { return JavaToken.NULLLIT;
            }
            // fall through
          case 177: break;
          case 71:
            { return JavaToken.THIS;
            }
            // fall through
          case 178: break;
          case 72:
            { return JavaToken.BOOLEANLIT;
            }
            // fall through
          case 179: break;
          case 73:
            { return JavaToken.VOID;
            }
            // fall through
          case 180: break;
          case 74:
            { return JavaToken.BREAK;
            }
            // fall through
          case 181: break;
          case 75:
            { return JavaToken.CATCH;
            }
            // fall through
          case 182: break;
          case 76:
            { return JavaToken.CLASS;
            }
            // fall through
          case 183: break;
          case 77:
            { return JavaToken.FINAL;
            }
            // fall through
          case 184: break;
          case 78:
            { return JavaToken.FLOAT;
            }
            // fall through
          case 185: break;
          case 79:
            { return JavaToken.SHORT;
            }
            // fall through
          case 186: break;
          case 80:
            { return JavaToken.SUPER;
            }
            // fall through
          case 187: break;
          case 81:
            { return JavaToken.THROW;
            }
            // fall through
          case 188: break;
          case 82:
            { return JavaToken.WHILE;
            }
            // fall through
          case 189: break;
          case 83:
            { return JavaToken.ASSERT;
            }
            // fall through
          case 190: break;
          case 84:
            { return JavaToken.DOUBLE;
            }
            // fall through
          case 191: break;
          case 85:
            { return JavaToken.IMPORT;
            }
            // fall through
          case 192: break;
          case 86:
            { return JavaToken.NATIVE;
            }
            // fall through
          case 193: break;
          case 87:
            { return JavaToken.PUBLIC;
            }
            // fall through
          case 194: break;
          case 88:
            { return JavaToken.RETURN;
            }
            // fall through
          case 195: break;
          case 89:
            { return JavaToken.STATIC;
            }
            // fall through
          case 196: break;
          case 90:
            { return JavaToken.SWITCH;
            }
            // fall through
          case 197: break;
          case 91:
            { return JavaToken.THROWS;
            }
            // fall through
          case 198: break;
          case 92:
            { return JavaToken.BOOLEAN;
            }
            // fall through
          case 199: break;
          case 93:
            { return JavaToken.DEFAULT;
            }
            // fall through
          case 200: break;
          case 94:
            { return JavaToken.EXTENDS;
            }
            // fall through
          case 201: break;
          case 95:
            { return JavaToken.FINALLY;
            }
            // fall through
          case 202: break;
          case 96:
            { return JavaToken.PACKAGE;
            }
            // fall through
          case 203: break;
          case 97:
            { return JavaToken.PRIVATE;
            }
            // fall through
          case 204: break;
          case 98:
            { return JavaToken.ABSTRACT;
            }
            // fall through
          case 205: break;
          case 99:
            { return JavaToken.CONTINUE;
            }
            // fall through
          case 206: break;
          case 100:
            { return JavaToken.STRICTFP;
            }
            // fall through
          case 207: break;
          case 101:
            { return JavaToken.VOLATILE;
            }
            // fall through
          case 208: break;
          case 102:
            { return JavaToken.INTERFACE;
            }
            // fall through
          case 209: break;
          case 103:
            { return JavaToken.PROTECTED;
            }
            // fall through
          case 210: break;
          case 104:
            { return JavaToken.TRANSIENT;
            }
            // fall through
          case 211: break;
          case 105:
            { return JavaToken.IMPLEMENTS;
            }
            // fall through
          case 212: break;
          case 106:
            { return JavaToken.INSTANCEOF;
            }
            // fall through
          case 213: break;
          case 107:
            { return JavaToken.SYNCHRONIZED;
            }
            // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
