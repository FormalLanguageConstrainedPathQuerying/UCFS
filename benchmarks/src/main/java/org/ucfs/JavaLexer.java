// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Java.x

package org.ucfs;


import java.io.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class JavaLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\4\30\2\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\41\1\43"+
    "\1\44\1\43\5\11\1\45\3\11\1\46\7\11\1\47"+
    "\2\11\1\50\1\51\1\52\1\53\1\54\1\6\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\11\1\66\1\67\1\70\1\71\1\72\1\73\1\11"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\6\0\1\111\32\0"+
    "\2\6\4\11\4\6\1\11\2\6\1\0\7\6\1\11"+
    "\4\6\1\11\5\6\27\11\1\6\37\11\1\6\u01ca\11"+
    "\4\6\14\11\16\6\5\11\7\6\1\11\1\6\1\11"+
    "\21\6\160\0\5\11\1\6\2\11\2\6\4\11\1\6"+
    "\1\11\6\6\1\11\1\6\3\11\1\6\1\11\1\6"+
    "\24\11\1\6\123\11\1\6\213\11\1\6\5\0\2\6"+
    "\246\11\1\6\46\11\2\6\1\11\6\6\51\11\6\6"+
    "\1\11\1\6\55\0\1\6\1\0\1\6\2\0\1\6"+
    "\2\0\1\6\1\0\10\6\33\11\4\6\4\11\15\6"+
    "\6\0\5\6\1\11\4\6\13\0\1\6\1\0\3\6"+
    "\53\11\37\0\4\6\2\11\1\0\143\11\1\6\1\11"+
    "\10\0\1\6\6\0\2\11\2\0\1\6\4\0\2\11"+
    "\12\0\3\11\2\6\1\11\17\6\1\0\1\11\1\0"+
    "\36\11\33\0\2\6\131\11\13\0\1\11\16\6\12\0"+
    "\41\11\11\0\2\11\4\6\1\11\2\6\1\0\30\11"+
    "\4\0\1\11\11\0\1\11\3\0\1\11\5\0\22\6"+
    "\31\11\3\0\4\6\13\11\65\6\25\11\1\6\22\11"+
    "\13\6\61\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\2\0\2\6\12\0\1\6\20\11\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\1\11\3\6\4\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\1\11\10\6\1\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\4\11\7\6\2\11"+
    "\1\6\1\0\2\6\3\0\1\6\6\11\4\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\2\11\1\6\2\11"+
    "\1\6\2\11\2\6\1\0\1\6\5\0\4\6\2\0"+
    "\2\6\3\0\3\6\1\0\7\6\4\11\1\6\1\11"+
    "\7\6\14\0\3\11\1\0\13\6\3\0\1\6\11\11"+
    "\1\6\3\11\1\6\26\11\1\6\7\11\1\6\2\11"+
    "\1\6\5\11\2\6\1\0\1\11\10\0\1\6\3\0"+
    "\1\6\3\0\2\6\1\11\17\6\2\11\2\0\2\6"+
    "\12\0\1\6\1\11\7\6\1\11\6\0\1\6\3\0"+
    "\1\6\10\11\2\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\3\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\1\6\1\11\20\6"+
    "\1\0\1\11\1\6\6\11\3\6\3\11\1\6\4\11"+
    "\3\6\2\11\1\6\1\11\1\6\2\11\3\6\2\11"+
    "\3\6\3\11\3\6\14\11\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\11\6\6\1\0\16\6\12\0"+
    "\11\6\1\11\6\6\5\0\10\11\1\6\3\11\1\6"+
    "\27\11\1\6\20\11\3\6\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\11\5\6\2\11"+
    "\2\0\2\6\12\0\20\6\1\11\3\0\1\6\10\11"+
    "\1\6\3\11\1\6\27\11\1\6\12\11\1\6\5\11"+
    "\2\6\1\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\7\6\1\11\1\6\2\11\2\0\2\6"+
    "\12\0\1\6\2\11\15\6\4\0\11\11\1\6\3\11"+
    "\1\6\51\11\2\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\1\11\5\6\3\11\1\0\7\6\3\11\2\0"+
    "\2\6\12\0\12\6\6\11\1\6\3\0\1\6\22\11"+
    "\3\6\30\11\1\6\11\11\1\6\1\11\2\6\7\11"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\6\6\12\0\2\6\2\0\15\6\60\11\1\0\2\11"+
    "\7\0\4\6\10\11\10\0\1\6\12\0\47\6\2\11"+
    "\1\6\1\11\1\6\5\11\1\6\30\11\1\6\1\11"+
    "\1\6\12\11\1\0\2\11\11\0\1\11\2\6\5\11"+
    "\1\6\1\11\1\6\6\0\2\6\12\0\2\6\4\11"+
    "\40\6\1\11\27\6\2\0\6\6\12\0\13\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\2\0\10\11\1\6"+
    "\44\11\4\6\24\0\1\6\2\0\5\11\13\0\1\6"+
    "\44\0\11\6\1\0\71\6\53\11\24\0\1\11\12\0"+
    "\6\6\6\11\4\0\4\11\3\0\1\11\3\0\2\11"+
    "\7\0\3\11\4\0\15\11\14\0\1\11\17\0\2\6"+
    "\46\11\1\6\1\11\5\6\1\11\2\6\53\11\1\6"+
    "\115\11\1\6\4\11\2\6\7\11\1\6\1\11\1\6"+
    "\4\11\2\6\51\11\1\6\4\11\2\6\41\11\1\6"+
    "\4\11\2\6\7\11\1\6\1\11\1\6\4\11\2\6"+
    "\17\11\1\6\71\11\1\6\4\11\2\6\103\11\2\6"+
    "\3\0\40\6\20\11\20\6\126\11\2\6\6\11\3\6"+
    "\u016c\11\2\6\21\11\1\6\32\11\5\6\113\11\3\6"+
    "\13\11\7\6\15\11\1\6\4\11\3\0\13\6\22\11"+
    "\3\0\13\6\22\11\2\0\14\6\15\11\1\6\3\11"+
    "\1\6\2\0\14\6\64\11\40\0\3\6\1\11\3\6"+
    "\2\11\1\0\2\6\12\0\41\6\4\0\1\6\12\0"+
    "\6\6\131\11\7\6\5\11\2\0\42\11\1\0\1\11"+
    "\5\6\106\11\12\6\37\11\1\6\14\0\4\6\14\0"+
    "\12\6\12\0\36\11\2\6\5\11\13\6\54\11\4\6"+
    "\32\11\6\6\12\0\46\6\27\11\5\0\4\6\65\11"+
    "\12\0\1\6\35\0\2\6\13\0\6\6\12\0\15\6"+
    "\1\11\10\6\16\0\1\6\2\0\77\6\5\0\57\11"+
    "\21\0\7\11\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\6\44\11"+
    "\24\0\10\6\12\0\3\6\3\11\12\0\44\11\2\6"+
    "\11\11\7\6\53\11\2\6\3\11\20\6\3\0\1\6"+
    "\25\0\4\11\1\0\6\11\1\0\2\11\3\0\1\11"+
    "\5\6\300\11\72\0\1\6\5\0\26\11\2\6\6\11"+
    "\2\6\46\11\2\6\6\11\2\6\10\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\37\11\2\6\65\11"+
    "\1\6\7\11\1\6\1\11\3\6\3\11\1\6\7\11"+
    "\3\6\4\11\2\6\6\11\4\6\15\11\5\6\3\11"+
    "\1\6\7\11\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\11\23\6\1\11\13\6\5\0\1\6\12\0\1\6"+
    "\1\11\15\6\1\11\20\6\15\11\3\6\40\11\20\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\11\4\6"+
    "\1\11\2\6\12\11\1\6\1\11\3\6\5\11\6\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\4\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\53\11\1\6\136\11\21\6\40\11\60\6\320\11\100\6"+
    "\375\11\3\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\37\11\2\0\120\11\2\0\45\6\11\11\2\6"+
    "\147\11\2\6\65\11\2\6\11\11\52\6\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\6\1\0"+
    "\13\6\1\11\7\6\64\11\14\6\2\0\62\11\22\0"+
    "\12\6\12\0\6\6\22\0\6\11\3\6\1\11\1\6"+
    "\2\11\13\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\6\6\5\11\1\0\12\11\12\0\5\11\1\6\51\11"+
    "\16\0\11\6\3\11\1\0\10\11\2\0\2\6\12\0"+
    "\6\6\27\11\3\6\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\6\3\11\2\6\13\11\5\0\2\6\3\11\2\0"+
    "\12\6\6\11\2\6\6\11\2\6\6\11\11\6\7\11"+
    "\1\6\7\11\1\6\53\11\1\6\16\11\6\6\163\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\20\0"+
    "\3\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\17\6\1\0\37\6\40\11"+
    "\15\6\36\11\5\6\46\11\5\0\5\6\36\11\2\6"+
    "\44\11\4\6\10\11\1\6\5\11\52\6\236\11\2\6"+
    "\12\0\6\6\44\11\4\6\44\11\4\6\50\11\10\6"+
    "\64\11\234\6\67\11\11\6\26\11\12\6\10\11\230\6"+
    "\6\11\2\6\1\11\1\6\54\11\1\6\2\11\3\6"+
    "\1\11\2\6\27\11\12\6\27\11\11\6\37\11\101\6"+
    "\23\11\1\6\2\11\12\6\26\11\12\6\32\11\106\6"+
    "\70\11\6\6\2\11\100\6\1\11\3\0\1\6\2\0"+
    "\5\6\4\0\4\11\1\6\3\11\1\6\35\11\2\6"+
    "\3\0\4\6\1\0\40\6\35\11\3\6\35\11\43\6"+
    "\10\11\1\6\34\11\2\0\31\6\66\11\12\6\26\11"+
    "\12\6\23\11\15\6\22\11\156\6\111\11\67\6\63\11"+
    "\15\6\63\11\15\6\44\11\4\0\10\6\12\0\u0146\6"+
    "\52\11\1\6\2\0\3\6\2\11\116\6\35\11\12\6"+
    "\1\11\10\6\26\11\13\0\137\6\25\11\33\6\27\11"+
    "\11\6\3\0\65\11\17\0\37\6\12\0\17\6\4\0"+
    "\55\11\13\0\2\6\1\0\17\6\1\0\2\6\31\11"+
    "\7\6\12\0\6\6\3\0\44\11\16\0\1\6\12\0"+
    "\4\6\1\11\2\0\1\11\10\6\43\11\1\0\2\6"+
    "\1\11\11\6\3\0\60\11\16\0\4\11\4\6\4\0"+
    "\1\6\14\0\1\11\1\6\1\11\43\6\22\11\1\6"+
    "\31\11\14\0\6\6\1\0\101\6\7\11\1\6\1\11"+
    "\1\6\4\11\1\6\17\11\1\6\12\11\7\6\57\11"+
    "\14\0\5\6\12\0\6\6\4\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\1\6\2\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\2\6\1\11\6\6\1\0\5\6\5\11\2\0"+
    "\2\6\7\0\3\6\5\0\213\6\65\11\22\0\4\11"+
    "\5\6\12\0\4\6\1\0\3\11\36\6\60\11\24\0"+
    "\2\11\1\6\1\11\10\6\12\0\246\6\57\11\7\0"+
    "\2\6\11\0\27\6\4\11\2\0\42\6\60\11\21\0"+
    "\3\6\1\11\13\6\12\0\46\6\53\11\15\0\1\11"+
    "\7\6\12\0\66\6\33\11\2\6\17\0\4\6\12\0"+
    "\306\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\42\6\71\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\271\6\1\11\54\6\4\11\37\6\232\11"+
    "\146\6\157\11\21\6\304\11\274\6\57\11\1\6\11\0"+
    "\307\6\107\11\271\6\71\11\7\6\37\11\1\6\12\0"+
    "\146\6\36\11\2\6\5\0\13\6\60\11\7\0\11\6"+
    "\4\11\14\6\12\0\11\6\25\11\5\6\23\11\260\6"+
    "\100\11\200\6\113\11\4\6\1\0\1\11\67\0\7\6"+
    "\4\0\15\11\100\6\2\11\1\6\1\11\1\0\13\6"+
    "\2\0\16\6\370\11\10\6\326\11\52\6\11\11\367\6"+
    "\37\11\61\6\3\11\21\6\4\11\10\6\u018c\11\4\6"+
    "\153\11\5\6\15\11\3\6\11\11\7\6\12\11\3\6"+
    "\2\0\1\6\4\0\301\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\11\1\6"+
    "\107\11\1\6\2\11\2\6\1\11\2\6\2\11\2\6"+
    "\4\11\1\6\14\11\1\6\1\11\1\6\7\11\1\6"+
    "\101\11\1\6\4\11\2\6\10\11\1\6\7\11\1\6"+
    "\34\11\1\6\4\11\1\6\5\11\1\6\1\11\3\6"+
    "\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\10\11\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\7\0\1\6"+
    "\21\0\2\6\7\0\1\6\2\0\1\6\5\0\325\6"+
    "\55\11\3\6\7\0\7\11\2\6\12\0\4\6\1\11"+
    "\u0171\6\54\11\16\0\5\6\306\11\13\6\7\0\51\6"+
    "\104\11\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6"+
    "\4\11\1\6\33\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\12\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\6\6\1\11\4\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\3\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\2\11\1\6\1\11\2\6\4\11\1\6"+
    "\7\11\1\6\4\11\1\6\4\11\1\6\1\11\1\6"+
    "\12\11\1\6\21\11\5\6\3\11\1\6\5\11\1\6"+
    "\21\11\u0134\6\12\0\6\6\336\11\42\6\65\11\13\6"+
    "\336\11\2\6\u0182\11\16\6\u0131\11\37\6\36\11\342\6"+
    "\113\11\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\0\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\17\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\40\1\41\2\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\0"+
    "\1\51\1\52\1\50\1\16\1\0\1\50\1\0\1\16"+
    "\2\0\1\16\1\0\1\53\1\0\1\54\1\55\1\56"+
    "\1\0\1\57\12\3\1\60\7\3\1\61\23\3\1\62"+
    "\1\63\1\0\1\64\2\0\1\65\3\0\1\16\3\0"+
    "\1\16\1\66\1\67\1\0\22\3\1\70\2\3\1\71"+
    "\2\3\1\72\20\3\1\73\3\3\2\0\1\50\1\0"+
    "\1\1\5\0\1\74\4\3\1\75\1\76\1\3\1\77"+
    "\4\3\1\100\1\101\7\3\1\102\1\3\1\103\13\3"+
    "\1\104\2\3\1\105\1\106\2\3\3\0\3\3\1\107"+
    "\1\110\1\111\4\3\1\112\1\113\12\3\1\114\2\3"+
    "\1\115\2\3\1\116\2\3\1\117\1\0\1\3\1\120"+
    "\3\3\1\121\3\3\1\122\2\3\1\123\3\3\1\124"+
    "\1\125\1\126\1\3\1\127\1\3\1\130\3\3\1\131"+
    "\1\3\1\132\1\133\1\134\3\3\1\135\1\136\5\3"+
    "\1\137\1\140\4\3\1\141\2\3\1\142\2\3\1\143"+
    "\1\144\1\3\1\145\1\146\1\147\2\3\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\112\0\112\0\u029a\0\u02e4\0\112\0\u032e\0\u0378"+
    "\0\u03c2\0\u040c\0\u0456\0\u04a0\0\112\0\u04ea\0\u0534\0\u057e"+
    "\0\112\0\112\0\112\0\112\0\u05c8\0\u0612\0\u065c\0\u06a6"+
    "\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6"+
    "\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\112\0\u0a68\0\112\0\112"+
    "\0\112\0\112\0\u0ab2\0\112\0\112\0\112\0\u0afc\0\u0b46"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\u0b90\0\u0bda"+
    "\0\u0c24\0\u0c6e\0\112\0\u0cb8\0\u0d02\0\u0d4c\0\112\0\u0d96"+
    "\0\112\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\112\0\u0f08\0\112"+
    "\0\112\0\112\0\u0f52\0\112\0\u0f9c\0\u0fe6\0\u1030\0\u107a"+
    "\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca"+
    "\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u0172\0\u14d0"+
    "\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970"+
    "\0\u19ba\0\u1a04\0\112\0\112\0\u1a4e\0\112\0\u1a98\0\u1ae2"+
    "\0\112\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\112\0\112\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u0172\0\u22fa"+
    "\0\u2344\0\u238e\0\u23d8\0\u2422\0\u0172\0\u246c\0\u24b6\0\u2500"+
    "\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750"+
    "\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u0172\0\u290c\0\u2956"+
    "\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u1b76\0\u2b12\0\u2b5c"+
    "\0\u2ba6\0\u2bf0\0\u2c3a\0\112\0\u2c84\0\u2cce\0\u2d18\0\u2d62"+
    "\0\u0172\0\u0172\0\u2dac\0\u0172\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4"+
    "\0\u0172\0\u0172\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046\0\u3090"+
    "\0\u30da\0\u0172\0\u3124\0\u0172\0\u316e\0\u31b8\0\u3202\0\u324c"+
    "\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u0172"+
    "\0\u349c\0\u34e6\0\u0172\0\u0172\0\u3530\0\u357a\0\u35c4\0\u360e"+
    "\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u0172\0\u0172\0\u0172\0\u3780"+
    "\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u0172\0\u38f2\0\u393c\0\u3986"+
    "\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u0172"+
    "\0\u3bd6\0\u3c20\0\u0172\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92"+
    "\0\u0172\0\u3ddc\0\u3e26\0\u0172\0\u3e70\0\u3eba\0\u3f04\0\u0172"+
    "\0\u3f4e\0\u3f98\0\u3fe2\0\u0172\0\u402c\0\u4076\0\u0172\0\u40c0"+
    "\0\u410a\0\u4154\0\u0172\0\u0172\0\u0172\0\u419e\0\u0172\0\u41e8"+
    "\0\u0172\0\u4232\0\u427c\0\u42c6\0\u0172\0\u4310\0\u0172\0\u0172"+
    "\0\u0172\0\u435a\0\u43a4\0\u43ee\0\u0172\0\u0172\0\u4438\0\u4482"+
    "\0\u44cc\0\u4516\0\u4560\0\u0172\0\u0172\0\u45aa\0\u45f4\0\u463e"+
    "\0\u4688\0\u0172\0\u46d2\0\u471c\0\u0172\0\u4766\0\u47b0\0\u0172"+
    "\0\u0172\0\u47fa\0\u0172\0\u0172\0\u0172\0\u4844\0\u488e\0\u0172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\4\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\7\6\1\33\1\0"+
    "\1\34\1\35\1\6\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\6\1\44\1\6\1\45\1\6\1\46\1\6"+
    "\1\47\1\50\1\51\1\52\1\6\1\53\1\54\3\6"+
    "\1\55\1\56\1\57\1\60\115\0\1\2\144\0\1\61"+
    "\54\0\2\5\1\0\2\5\1\0\2\5\1\62\40\5"+
    "\1\63\40\5\1\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\31\6\4\0\1\6\35\0\1\64\67\0"+
    "\1\65\21\0\1\66\54\0\2\67\1\0\2\67\1\0"+
    "\6\67\1\0\34\67\1\70\40\67\35\0\1\71\74\0"+
    "\1\72\14\0\1\73\76\0\1\74\12\0\1\75\1\76"+
    "\76\0\1\77\1\0\5\100\77\0\1\101\4\0\1\102"+
    "\10\0\1\103\77\0\1\104\1\0\4\105\11\0\1\106"+
    "\1\107\1\110\1\111\1\0\1\112\4\0\1\113\1\0"+
    "\1\106\1\0\1\107\1\110\1\107\4\0\1\111\12\0"+
    "\1\112\32\0\1\104\1\0\5\114\11\0\1\107\1\110"+
    "\1\111\6\0\1\115\3\0\1\107\1\110\1\107\4\0"+
    "\1\111\54\0\1\116\113\0\1\117\1\120\111\0\1\121"+
    "\111\0\1\122\1\123\110\0\1\124\54\0\1\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\2\6\1\125"+
    "\16\6\1\126\7\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\16\6\1\127\1\6\1\130"+
    "\6\6\1\131\1\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\1\6\1\132\6\6\1\133"+
    "\2\6\1\134\2\6\1\135\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\136"+
    "\10\6\1\137\12\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\13\6\1\140\1\6\1\141"+
    "\10\6\1\142\2\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\1\6\1\143\7\6\1\144"+
    "\1\6\1\145\2\6\1\146\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\6\6\1\147"+
    "\5\6\1\150\1\151\13\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\16\6\1\152\12\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\153\3\6\1\154\15\6\1\155\5\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\156\16\6\1\157\2\6\1\160\5\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\161\23\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\10\6\1\162\11\6"+
    "\1\163\1\164\1\6\1\165\1\6\1\166\1\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\10\6\1\167\7\6\1\170\10\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\16\6\1\171"+
    "\12\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\10\6\1\172\20\6\4\0\1\6\35\0"+
    "\1\173\50\0\1\174\13\0\1\5\3\0\1\5\10\0"+
    "\4\5\20\0\1\5\4\0\1\5\3\0\1\5\6\0"+
    "\1\5\2\0\1\5\1\0\1\5\1\175\26\0\1\176"+
    "\105\0\1\67\3\0\1\67\10\0\3\177\1\200\20\0"+
    "\1\67\4\0\1\67\3\0\1\67\6\0\1\67\2\0"+
    "\1\67\1\0\1\67\36\0\1\201\131\0\1\107\1\202"+
    "\13\0\1\107\1\202\1\107\27\0\17\203\1\204\72\203"+
    "\2\102\4\0\103\102\26\0\5\100\11\0\1\107\1\202"+
    "\13\0\1\107\1\202\1\107\54\0\4\105\14\0\1\111"+
    "\6\0\1\113\12\0\1\111\47\0\2\205\103\0\1\206"+
    "\1\0\1\206\2\0\5\207\103\0\1\210\1\0\5\211"+
    "\7\0\4\211\10\0\6\211\54\0\4\105\23\0\1\113"+
    "\62\0\5\114\13\0\1\111\6\0\1\115\12\0\1\111"+
    "\47\0\5\114\22\0\1\115\72\0\1\212\111\0\1\213"+
    "\1\214\53\0\1\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\21\6\1\215\7\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\21\6\1\216"+
    "\7\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\16\6\1\217\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\220"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\221\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\21\6\1\222"+
    "\1\223\6\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\1\6\1\224\27\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\225\27\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\15\6\1\226\13\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\6\6"+
    "\1\227\22\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\23\6\1\230\5\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\21\6"+
    "\1\231\7\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\23\6\1\232\5\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\233\6\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\13\6\1\234\15\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\15\6"+
    "\1\235\13\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\16\6\1\236\12\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\20\6"+
    "\1\237\10\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\17\6\1\240\11\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\21\6"+
    "\1\241\1\242\6\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\15\6\1\243\13\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\22\6\1\244\6\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\25\6\1\245\3\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\13\6\1\246\15\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\3\6\1\247\25\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\11\6\1\250\4\6\1\251\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\2\6\1\252"+
    "\26\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\253\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\16\6\1\254"+
    "\12\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\255\16\6\1\256\10\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\17\6\1\257\11\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\11\6\1\260\17\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\15\6\1\261\13\6\4\0\2\6\10\0\1\6\13\0"+
    "\5\6\7\0\7\6\4\0\11\6\1\262\6\6\1\263"+
    "\10\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\264\21\6\1\265\3\6\1\266"+
    "\1\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\11\6\1\267\1\6\1\270\15\6\4\0"+
    "\2\6\10\0\1\6\13\0\5\6\7\0\7\6\4\0"+
    "\11\6\1\271\17\6\4\0\1\6\25\0\5\272\7\0"+
    "\4\272\10\0\6\272\14\0\1\175\26\0\1\176\10\0"+
    "\4\200\75\0\1\176\10\0\4\67\101\0\1\273\1\0"+
    "\1\273\2\0\5\274\60\0\17\203\1\275\111\203\1\275"+
    "\4\203\1\276\65\203\25\0\2\205\16\0\1\111\6\0"+
    "\1\277\12\0\1\111\47\0\5\207\105\0\5\207\11\0"+
    "\1\107\10\0\1\300\3\0\1\107\1\0\1\107\54\0"+
    "\5\301\7\0\4\301\10\0\6\301\52\0\1\302\1\0"+
    "\5\211\7\0\4\211\1\111\1\202\5\0\1\303\6\211"+
    "\4\0\1\111\3\0\1\202\53\0\1\304\54\0\1\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\305\6\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\306\23\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\13\6"+
    "\1\307\15\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\1\6\1\310\27\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\311\23\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\312\23\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\3\6"+
    "\1\313\25\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\314\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\21\6"+
    "\1\315\7\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\22\6\1\316\6\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\317\27\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\2\6\1\320\26\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\321\23\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\14\6\1\322\14\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\323\23\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\265\7\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\324\27\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\1\6\1\325\27\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\13\6"+
    "\1\326\2\6\1\327\12\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\330\6\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\331\23\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\7\6\1\332\21\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\11\6\1\333\17\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\13\6\1\334\15\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\12\6\1\335\16\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\24\6\1\336\4\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\22\6\1\337\6\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\13\6\1\340\15\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\23\6\1\341\5\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\20\6\1\342\10\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\22\6\1\343\6\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\11\6\1\344\17\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\345\23\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\22\6\1\346\6\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\3\6\1\347\25\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\21\6\1\350\7\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\16\6\1\351\12\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\15\6\1\352\13\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\353\23\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\4\6\1\354\24\6"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\1\6\1\355\27\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\13\6\1\356\15\6"+
    "\4\0\1\6\25\0\5\357\7\0\4\357\10\0\6\357"+
    "\54\0\5\274\105\0\5\274\11\0\1\107\10\0\1\360"+
    "\3\0\1\107\1\0\1\107\27\0\17\203\1\275\4\203"+
    "\1\2\65\203\25\0\2\205\25\0\1\277\62\0\5\207"+
    "\22\0\1\300\62\0\5\301\7\0\4\301\1\0\1\202"+
    "\5\0\1\361\6\301\10\0\1\202\43\0\5\301\7\0"+
    "\4\301\1\0\1\202\6\0\6\301\10\0\1\202\43\0"+
    "\5\211\7\0\4\211\7\0\1\303\6\211\27\0\1\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\20\6"+
    "\1\362\10\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\363\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\364\23\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\12\6\1\365\16\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\10\6"+
    "\1\366\20\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\367\7\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\11\6"+
    "\1\370\17\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\23\6\1\371\5\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\13\6"+
    "\1\372\15\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\15\6\1\373\13\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\13\6"+
    "\1\374\15\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\22\6\1\375\6\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\5\6"+
    "\1\376\23\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\377\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\u0100\27\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\u0101\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\24\6"+
    "\1\u0102\4\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\1\6\1\u0103\27\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\1\6"+
    "\1\u0104\27\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u0105\23\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\11\6"+
    "\1\u0106\17\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\u0107\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\u0108\6\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\11\6\1\u0109\17\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\3\6"+
    "\1\u010a\25\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\20\6\1\u010b\10\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\3\6"+
    "\1\u010c\25\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\10\6\1\u010d\20\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\25\6"+
    "\1\u010e\3\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\21\6\1\u010f\7\6\4\0\2\6"+
    "\10\0\1\6\13\0\5\6\7\0\7\6\4\0\22\6"+
    "\1\u0110\6\6\4\0\2\6\10\0\1\6\13\0\5\6"+
    "\7\0\7\6\4\0\5\6\1\u0111\23\6\4\0\1\6"+
    "\25\0\5\u0112\7\0\4\u0112\10\0\6\u0112\54\0\5\274"+
    "\22\0\1\360\62\0\5\301\7\0\4\301\7\0\1\361"+
    "\6\301\27\0\1\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\u0113\27\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\u0114"+
    "\6\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\1\6\1\u0115\27\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\15\6\1\u0116"+
    "\13\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\13\6\1\u0117\15\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u0118"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\4\6\1\u0119\24\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\13\6\1\u011a"+
    "\15\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\14\6\1\u011b\14\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\u011c"+
    "\6\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\15\6\1\u011d\13\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\6\6\1\u011e"+
    "\22\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u011f\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\7\6\1\u0120"+
    "\21\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\u0121\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\3\6\1\u0122"+
    "\25\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\3\6\1\u0123\25\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\15\6\1\u0124"+
    "\13\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\3\6\1\u0125\25\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\u0126"+
    "\6\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\10\6\1\u0127\20\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\20\6\1\u0128"+
    "\10\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\21\6\1\u0129\7\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\11\6\1\u012a"+
    "\17\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\11\6\1\u012b\17\6\4\0\1\6\25\0"+
    "\5\5\7\0\4\5\10\0\6\5\27\0\1\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\3\6\1\u012c"+
    "\25\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\15\6\1\u012d\13\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\23\6\1\u012e"+
    "\5\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\u012f\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\21\6\1\u0130"+
    "\7\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\27\6\1\u0131\1\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u0132"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\3\6\1\u0133\25\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\1\6\1\u0134"+
    "\27\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u0135\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u0136"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\u0137\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\6\6\1\u0138"+
    "\22\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\16\6\1\u0139\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u013a"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\13\6\1\u013b\15\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\u013c"+
    "\6\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u013d\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\15\6\1\u013e"+
    "\13\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u013f\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\3\6\1\u0140"+
    "\25\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u0141\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\17\6\1\u0142"+
    "\11\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\15\6\1\u0143\13\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\15\6\1\u0144"+
    "\13\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\5\6\1\u0145\23\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\22\6\1\u0146"+
    "\6\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\16\6\1\u0147\12\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\5\6\1\u0148"+
    "\23\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\4\6\1\u0149\24\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\11\6\1\u014a"+
    "\17\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\22\6\1\u014b\6\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\21\6\1\u014c"+
    "\7\6\4\0\2\6\10\0\1\6\13\0\5\6\7\0"+
    "\7\6\4\0\6\6\1\u014d\22\6\4\0\2\6\10\0"+
    "\1\6\13\0\5\6\7\0\7\6\4\0\30\6\1\u014e"+
    "\4\0\2\6\10\0\1\6\13\0\5\6\7\0\7\6"+
    "\4\0\5\6\1\u014f\23\6\4\0\2\6\10\0\1\6"+
    "\13\0\5\6\7\0\7\6\4\0\4\6\1\u0150\24\6"+
    "\4\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\0\3\1\1\0\2\11\2\1"+
    "\1\11\6\1\1\11\3\1\4\11\20\1\1\11\1\1"+
    "\4\11\1\0\3\11\2\0\6\11\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\11\1\0\1\11\2\0"+
    "\1\1\1\0\1\11\1\0\3\11\1\0\1\11\46\1"+
    "\2\11\1\0\1\11\2\0\1\11\3\0\1\1\3\0"+
    "\1\1\2\11\1\0\55\1\2\0\1\1\1\0\1\1"+
    "\5\0\1\11\52\1\3\0\40\1\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return JavaToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 105: break;
          case 2:
            { return JavaToken.EXCLAMATIONMARK;
            }
            // fall through
          case 106: break;
          case 3:
            { return JavaToken.ID;
            }
            // fall through
          case 107: break;
          case 4:
            { return JavaToken.PERCENT;
            }
            // fall through
          case 108: break;
          case 5:
            { return JavaToken.ANDBIT;
            }
            // fall through
          case 109: break;
          case 6:
            { return JavaToken.PARENTHLEFT;
            }
            // fall through
          case 110: break;
          case 7:
            { return JavaToken.PARENTHRIGHT;
            }
            // fall through
          case 111: break;
          case 8:
            { return JavaToken.STAR;
            }
            // fall through
          case 112: break;
          case 9:
            { return JavaToken.PLUS;
            }
            // fall through
          case 113: break;
          case 10:
            { return JavaToken.COMMA;
            }
            // fall through
          case 114: break;
          case 11:
            { return JavaToken.MINUS;
            }
            // fall through
          case 115: break;
          case 12:
            { return JavaToken.DOT;
            }
            // fall through
          case 116: break;
          case 13:
            { return JavaToken.SLASH;
            }
            // fall through
          case 117: break;
          case 14:
            { return JavaToken.INTEGERLIT;
            }
            // fall through
          case 118: break;
          case 15:
            { return JavaToken.COLON;
            }
            // fall through
          case 119: break;
          case 16:
            { return JavaToken.SEMICOLON;
            }
            // fall through
          case 120: break;
          case 17:
            { return JavaToken.LT;
            }
            // fall through
          case 121: break;
          case 18:
            { return JavaToken.ASSIGN;
            }
            // fall through
          case 122: break;
          case 19:
            { return JavaToken.GT;
            }
            // fall through
          case 123: break;
          case 20:
            { return JavaToken.QUESTIONMARK;
            }
            // fall through
          case 124: break;
          case 21:
            { return JavaToken.AT;
            }
            // fall through
          case 125: break;
          case 22:
            { return JavaToken.BRACKETLEFT;
            }
            // fall through
          case 126: break;
          case 23:
            { return JavaToken.BRACKETRIGHT;
            }
            // fall through
          case 127: break;
          case 24:
            { return JavaToken.XORBIT;
            }
            // fall through
          case 128: break;
          case 25:
            { return JavaToken.CURLYLEFT;
            }
            // fall through
          case 129: break;
          case 26:
            { return JavaToken.ORBIT;
            }
            // fall through
          case 130: break;
          case 27:
            { return JavaToken.CURLYRIGHT;
            }
            // fall through
          case 131: break;
          case 28:
            { return JavaToken.TILDA;
            }
            // fall through
          case 132: break;
          case 29:
            { return JavaToken.NOTEQ;
            }
            // fall through
          case 133: break;
          case 30:
            { return JavaToken.STRINGLIT;
            }
            // fall through
          case 134: break;
          case 31:
            { return JavaToken.PERCENTASSIGN;
            }
            // fall through
          case 135: break;
          case 32:
            { return JavaToken.AND;
            }
            // fall through
          case 136: break;
          case 33:
            { return JavaToken.ANDASSIGN;
            }
            // fall through
          case 137: break;
          case 34:
            { return JavaToken.STARASSIGN;
            }
            // fall through
          case 138: break;
          case 35:
            { return JavaToken.PLUSPLUS;
            }
            // fall through
          case 139: break;
          case 36:
            { return JavaToken.PLUSASSIGN;
            }
            // fall through
          case 140: break;
          case 37:
            { return JavaToken.MINUSMINUS;
            }
            // fall through
          case 141: break;
          case 38:
            { return JavaToken.MINUSASSIGN;
            }
            // fall through
          case 142: break;
          case 39:
            { return JavaToken.ARROW;
            }
            // fall through
          case 143: break;
          case 40:
            { return JavaToken.FLOATINGLIT;
            }
            // fall through
          case 144: break;
          case 41:
            { /* DO NOTHING */
            }
            // fall through
          case 145: break;
          case 42:
            { return JavaToken.SLASHASSIGN;
            }
            // fall through
          case 146: break;
          case 43:
            { return JavaToken.DOUBLECOLON;
            }
            // fall through
          case 147: break;
          case 44:
            { return JavaToken.LESSEQ;
            }
            // fall through
          case 148: break;
          case 45:
            { return JavaToken.EQ;
            }
            // fall through
          case 149: break;
          case 46:
            { return JavaToken.GREATEQ;
            }
            // fall through
          case 150: break;
          case 47:
            { return JavaToken.XORASSIGN;
            }
            // fall through
          case 151: break;
          case 48:
            { return JavaToken.DO;
            }
            // fall through
          case 152: break;
          case 49:
            { return JavaToken.IF;
            }
            // fall through
          case 153: break;
          case 50:
            { return JavaToken.ORASSIGN;
            }
            // fall through
          case 154: break;
          case 51:
            { return JavaToken.OR;
            }
            // fall through
          case 155: break;
          case 52:
            { return JavaToken.CHARLIT;
            }
            // fall through
          case 156: break;
          case 53:
            { return JavaToken.ELLIPSIS;
            }
            // fall through
          case 157: break;
          case 54:
            { return JavaToken.SHIFTLEFTASSIGN;
            }
            // fall through
          case 158: break;
          case 55:
            { return JavaToken.SHIFTRIGHTASSIGN;
            }
            // fall through
          case 159: break;
          case 56:
            { return JavaToken.FOR;
            }
            // fall through
          case 160: break;
          case 57:
            { return JavaToken.INT;
            }
            // fall through
          case 161: break;
          case 58:
            { return JavaToken.NEW;
            }
            // fall through
          case 162: break;
          case 59:
            { return JavaToken.TRY;
            }
            // fall through
          case 163: break;
          case 60:
            { return JavaToken.USRIGHTSHIFTASSIGN;
            }
            // fall through
          case 164: break;
          case 61:
            { return JavaToken.BYTE;
            }
            // fall through
          case 165: break;
          case 62:
            { return JavaToken.CASE;
            }
            // fall through
          case 166: break;
          case 63:
            { return JavaToken.CHAR;
            }
            // fall through
          case 167: break;
          case 64:
            { return JavaToken.ELSE;
            }
            // fall through
          case 168: break;
          case 65:
            { return JavaToken.ENUM;
            }
            // fall through
          case 169: break;
          case 66:
            { return JavaToken.LONG;
            }
            // fall through
          case 170: break;
          case 67:
            { return JavaToken.NULLLIT;
            }
            // fall through
          case 171: break;
          case 68:
            { return JavaToken.THIS;
            }
            // fall through
          case 172: break;
          case 69:
            { return JavaToken.BOOLEANLIT;
            }
            // fall through
          case 173: break;
          case 70:
            { return JavaToken.VOID;
            }
            // fall through
          case 174: break;
          case 71:
            { return JavaToken.BREAK;
            }
            // fall through
          case 175: break;
          case 72:
            { return JavaToken.CATCH;
            }
            // fall through
          case 176: break;
          case 73:
            { return JavaToken.CLASS;
            }
            // fall through
          case 177: break;
          case 74:
            { return JavaToken.FINAL;
            }
            // fall through
          case 178: break;
          case 75:
            { return JavaToken.FLOAT;
            }
            // fall through
          case 179: break;
          case 76:
            { return JavaToken.SHORT;
            }
            // fall through
          case 180: break;
          case 77:
            { return JavaToken.SUPER;
            }
            // fall through
          case 181: break;
          case 78:
            { return JavaToken.THROW;
            }
            // fall through
          case 182: break;
          case 79:
            { return JavaToken.WHILE;
            }
            // fall through
          case 183: break;
          case 80:
            { return JavaToken.ASSERT;
            }
            // fall through
          case 184: break;
          case 81:
            { return JavaToken.DOUBLE;
            }
            // fall through
          case 185: break;
          case 82:
            { return JavaToken.IMPORT;
            }
            // fall through
          case 186: break;
          case 83:
            { return JavaToken.NATIVE;
            }
            // fall through
          case 187: break;
          case 84:
            { return JavaToken.PUBLIC;
            }
            // fall through
          case 188: break;
          case 85:
            { return JavaToken.RETURN;
            }
            // fall through
          case 189: break;
          case 86:
            { return JavaToken.STATIC;
            }
            // fall through
          case 190: break;
          case 87:
            { return JavaToken.SWITCH;
            }
            // fall through
          case 191: break;
          case 88:
            { return JavaToken.THROWS;
            }
            // fall through
          case 192: break;
          case 89:
            { return JavaToken.BOOLEAN;
            }
            // fall through
          case 193: break;
          case 90:
            { return JavaToken.DEFAULT;
            }
            // fall through
          case 194: break;
          case 91:
            { return JavaToken.EXTENDS;
            }
            // fall through
          case 195: break;
          case 92:
            { return JavaToken.FINALLY;
            }
            // fall through
          case 196: break;
          case 93:
            { return JavaToken.PACKAGE;
            }
            // fall through
          case 197: break;
          case 94:
            { return JavaToken.PRIVATE;
            }
            // fall through
          case 198: break;
          case 95:
            { return JavaToken.ABSTRACT;
            }
            // fall through
          case 199: break;
          case 96:
            { return JavaToken.CONTINUE;
            }
            // fall through
          case 200: break;
          case 97:
            { return JavaToken.STRICTFP;
            }
            // fall through
          case 201: break;
          case 98:
            { return JavaToken.VOLATILE;
            }
            // fall through
          case 202: break;
          case 99:
            { return JavaToken.INTERFACE;
            }
            // fall through
          case 203: break;
          case 100:
            { return JavaToken.PROTECTED;
            }
            // fall through
          case 204: break;
          case 101:
            { return JavaToken.TRANSIENT;
            }
            // fall through
          case 205: break;
          case 102:
            { return JavaToken.IMPLEMENTS;
            }
            // fall through
          case 206: break;
          case 103:
            { return JavaToken.INSTANCEOF;
            }
            // fall through
          case 207: break;
          case 104:
            { return JavaToken.SYNCHRONIZED;
            }
            // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
